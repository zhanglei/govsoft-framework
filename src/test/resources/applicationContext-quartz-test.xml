<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	default-lazy-init="true">
	
	<description>使用quartz的定时任务文件</description>
	
	<import resource="classpath*:applicationContext.xml" />
	
	<!-- Quartz本地Schduler -->
	<bean id="localQuartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" lazy-init="false">
		<!-- Triggers集成 -->
		<property name="triggers">
			<list>
				<ref bean="cronTrigger" />
			</list>
		</property>
		<!-- Quartz配置 -->
		<property name="quartzProperties">
			<props>
				<prop key="org.quartz.threadPool.threadCount">5</prop>
			</props>
		</property>
		<!-- 启动时延期3秒开始任务 -->
		<property name="startupDelay" value="3" />
	</bean>
	<!-- Cron式Trigger定义 -->
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="cronJobDetail" />
		<property name="cronExpression" value="0 0/1 * * * ?" />
	</bean>
	<!-- Cron JobDetajil, 基于MethodInvokingJobDetailFactoryBean调用普通Spring Bean -->
	<bean id="cronJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="cronJob" />
		<property name="targetMethod" value="execute" />
		<!-- 同一任务在前一次执行未完成而Trigger时间又到时是否并发开始新的执行, 默认为true. -->
		<property name="concurrent" value="true" />
	</bean>
	<!-- 被Cron执行的普通Spring Bean -->
	<bean id="cronJob" class="com.govsoft.framework.schedule.QuartzJob" />
	
	
	<!-- Quartz集群Schduler -->
	<bean id="clusterQuartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<!-- Triggers集成 -->
		<property name="triggers">
			<list>
				<ref bean="timerTrigger" />
			</list>
		</property>
		<!--  quartz配置文件路径-->
		<property name="configLocation" value="classpath:quartz.properties" />
		<!-- 启动时延期2秒开始任务 -->
		<property name="startupDelay" value="2" />
		<!-- 保存Job数据到数据库所需的数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- Job接受applicationContext的成员变量名 -->
		<property name="applicationContextSchedulerContextKey" value="applicationContext" />
	</bean>
	<!-- Timer式 Trigger定义-->
	<bean id="timerTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail" ref="timerJobDetail" />
		<!-- 每次执行间隔5分钟 -->
		<property name="repeatInterval" value="300000" />
	</bean>
	<!-- Timer JobDetail, 基于JobDetailBean实例化Job Class,可持久化到数据库实现集群 -->
	<bean name="timerJobDetail" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass" value="com.govsoft.framework.schedule.QuartzClusterableJob" />
		<!-- fail-over节点重新执行之前所有失败或未执行的任务, 默认为false. -->
		<property name="requestsRecovery" value="true" />
	</bean>

</beans>	